<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kalix.ApiCrypto</name>
    </assembly>
    <members>
        <member name="T:Kalix.ApiCrypto.AES.AESBlob">
            <summary>
            Helper library to create/use AES blobs encrypted with a RSA certificate
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESBlob.CreateBlob(Kalix.ApiCrypto.AES.AESKeySize,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create an AES key that is encrypted using a RSA certificate
            </summary>
            <param name="keySize">Required AES key size</param>
            <param name="rsaPublicCert">RSA public certificate used to sign</param>
            <returns>data that can be stored</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESBlob.CreateBlob(Kalix.ApiCrypto.AES.AESKeySize,Kalix.ApiCrypto.RSA.RSAServiceProvider)">
            <summary>
            Create an AES key that is encrypted using a RSA certificate, this is the parsed version for increased efficiancy
            
            To create the parsed cert <see cref="!:Kalix.ApiCrypto.AES.RSACertificateParser.ParsePublicCertificate"/>
            </summary>
            <param name="keySize">Required AES key size</param>
            <param name="rsaPublicCert">RSA parsed public certificate used to sign</param>
            <returns>data that can be stored</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESBlob.CreateEncryptor(System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create an AES encryptor from an encrypted AES key, you can use the encryptor to create 
            </summary>
            <param name="blob">AES data created from the <see cref="M:Kalix.ApiCrypto.AES.AESBlob.CreateBlob(Kalix.ApiCrypto.AES.AESKeySize,System.Security.Cryptography.X509Certificates.X509Certificate2)"/> method</param>
            <param name="rsaPrivateCert">RSA certificate to decrypt data, must have a private key</param>
            <returns>Encryptor that can be used to encrypt/decrypt any number of documents</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESBlob.CreateEncryptor(System.Byte[],Kalix.ApiCrypto.RSA.RSAServiceProvider)">
            <summary>
            Create an AES encryptor from an encrypted AES key, you can use the encryptor to create. This is the parsed version for increased efficiancy
            
            To create the parsed cert <see cref="!:Kalix.ApiCrypto.AES.RSACertificateParser.ParsePrivateCertificate"/>
            </summary>
            <param name="blob">AES data created from the <see cref="M:Kalix.ApiCrypto.AES.AESBlob.CreateBlob(Kalix.ApiCrypto.AES.AESKeySize,System.Security.Cryptography.X509Certificates.X509Certificate2)"/> method</param>
            <param name="rsaPrivateCert">Parsed RSA certificate to decrypt data, must have a private key</param>
            <returns>Encryptor that can be used to encrypt/decrypt any number of documents</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.AES.AESEncryptor">
            <summary>
            This class is designed to be used over and over again for a single key
            Will create a new IV per file and save it at the start of the file
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESEncryptor.#ctor(System.Byte[])">
            <summary>
            Create the encyptor using an AES key
            </summary>
            <param name="key">Must be a valid AES key</param>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESEncryptor.Encrypt(System.IObservable{System.Byte[]})">
            <summary>
            Encrypt a stream of data
            
            As per best practise creates a new IV for every record encryted, this IV is exported in the stream along with
            the encrypted data
            </summary>
            <param name="data">Observable stream of data to encrypt</param>
            <returns>Observable stream of encrypted data, first chunks will contain length of IV (4 bytes), then the IV bytes</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.AES.AESEncryptor.Decrypt(System.IObservable{System.Byte[]})">
            <summary>
            Decrypt an encryted stream of data
            </summary>
            <param name="data">
            Observable stream of data to decrypt (expected format is 4 bytes which 
            corresponds to the IV length, the IV iteself, and then the data to decrypt)
            </param>
            <returns>Observable stream of decrypted data</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.AES.AESKeySize">
            <summary>
            Represents the supported AES key sizes
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.AsymmetricPaddingMode">
            <summary>
            Padding modes
            </summary>
        </member>
        <member name="F:Kalix.ApiCrypto.AsymmetricPaddingMode.None">
            <summary>
            No padding
            </summary>
        </member>
        <member name="F:Kalix.ApiCrypto.AsymmetricPaddingMode.Pkcs1">
            <summary>
            PKCS #1 padding
            </summary>
        </member>
        <member name="F:Kalix.ApiCrypto.AsymmetricPaddingMode.Oaep">
            <summary>
            Optimal Asymmetric Encryption Padding
            </summary>
        </member>
        <member name="F:Kalix.ApiCrypto.AsymmetricPaddingMode.Pss">
            <summary>
            Probabilistic Signature Scheme padding
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.EC.ECCertificateBuilder">
            <summary>
            Helper class to build X509Certificates using the EC based algorithms
            Right now it only supports signing certificates using ECDSA
            
            Note that it uses the newer Cng library
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.EC.ECCertificateBuilder.CreateNewSigningCertificate(System.String)">
            <summary>
            Create a ECDSA based certificate with the given subject name. Uses the P521 curve and Sha256 by default.
            </summary>
            <param name="subjectName">Subject Name of the certificate (Omit the CN= part)</param>
            <returns>An exportable X509Certificate2 object (with private key)</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.EC.ECCertificateBuilder.CreateNewSigningCertificate(Kalix.ApiCrypto.EC.ECCertificateBuilderOptions)">
            <summary>
            Create a ECDSA based certificate with the given options
            </summary>
            <param name="buildOptions">Allows for more advanced configuration</param>
            <returns>An exportable X509Certificate2 object (with private key)</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.EC.ECCertificateBuilderOptions">
            <summary>
            Advanced options when building an EC based certificate
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.EC.ECCertificateBuilderOptions.FullSubjectName">
            <summary>
            Full distinguished name that will be used in the certificate
            ie. CN=Subject
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.EC.ECCertificateBuilderOptions.ECKeyName">
            <summary>
            Name of the internal EC keypair that is created
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.EC.ECCertificateBuilderOptions.ECCurve">
            <summary>
            Select from the supported curves, higher key length is more secure
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.EC.ECCertificateBuilderOptions.HashingMethod">
            <summary>
            Select from the supported hashing methods, higher key length is more secure
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.EC.ECDSACertificateParser">
            <summary>
            Helper class to parse ECDSA based X509Certificates using the newer Cng libraries
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.EC.ECDSACertificateParser.ParsePrivateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Parses the certificate to get access to the underlying ECDsaCng implementation
            Requires the private key so that the resulting ECDsaCng can sign
            </summary>
            <param name="certificate">A certificate from a file or store</param>
            <returns>ECDsaCng that can sign AND verify data</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.EC.ECDSACertificateParser.ParsePublicCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Parses the certificate to get access to the underlying ECDsaCng implementation
            Only requires the public key
            </summary>
            <param name="certificate">A certificate from a file or store</param>
            <returns>ECDsaCng that can verify data only</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.EC.ECNamedCurves">
            <summary>
            EC Named Curves supported by the Cng library
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.JWT.JsonWebToken">
            <summary>
            Helper library to create JsonWebTokens
            For more info see the <a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html">spec</a>
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.JWT.JsonWebToken.EncodeUsingECDSA``1(``0,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a web token signed by an ECDSA X509Certificate
            </summary>
            <param name="claims">JSON serialisable data to be signed</param>
            <param name="signingCertificate">Certificate to use for signing, must include a private key</param>
            <returns>JWT token</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.JWT.JsonWebToken.EncodeUsingECDSA``1(``0,System.Security.Cryptography.ECDsaCng)">
            <summary>
            Create a web token signed by an ECDSA certificate, this is the parsed version for increased efficiancy
            
            To create the signer <see cref="M:Kalix.ApiCrypto.EC.ECDSACertificateParser.ParsePrivateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            </summary>
            <param name="claims">JSON serialisable data to be signed</param>
            <param name="signingCertificate">Certificate data to use for signing</param>
            <returns>JWT token</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.JWT.JsonWebToken.DecodeUsingECDSA``1(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)">
            <summary>
            Verify and then parse the data in a JWT
            </summary>
            <param name="token">The JWT to parse and verify</param>
            <param name="verificationCertificate">Public key certificate to verify the token with</param>
            <param name="verify">Whether to actually verify the token or not</param>
            <returns>Parsed object data</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.JWT.JsonWebToken.DecodeUsingECDSA``1(System.String,System.Security.Cryptography.ECDsaCng,System.Boolean)">
            <summary>
            Verify and then parse the data in a JWT, this is the parsed version for increased efficiancy
            
            To create the verifier <see cref="M:Kalix.ApiCrypto.EC.ECDSACertificateParser.ParsePublicCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            </summary>
            <param name="token">The JWT to parse and verify</param>
            <param name="verificationCertificate">Public key certificate to verify the token with</param>
            <param name="verify">Whether to actually verify the token or not</param>
            <returns>Parsed object data</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.JWT.SignatureVerificationException">
            <summary>
            Used for JWT verification errors
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.HashingMethods">
            <summary>
            Hashing method for signing
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.RSA.RSACertificateParser">
            <summary>
            Helper class to parse RSA X509Certificates using the newer Cng libraries
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSACertificateParser.ParsePrivateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Parses the certificate to get access to the underlying RSAServiceProvider implementation
            Requires the private key so that the resulting RSAServiceProvider can encrypt/sign
            </summary>
            <param name="certificate">A certificate from a file or store</param>
            <returns>RSAServiceProvider that can verify AND sign/encryt AND decrypt data</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSACertificateParser.ParsePublicCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Parses the certificate to get access to the underlying RSAServiceProvider implementation
            Only requires the public key
            </summary>
            <param name="certificate">A certificate from a file or store</param>
            <returns>RSAServiceProvider that can verify/encrypt data only</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions">
            <summary>
            Advanced options when building an RSA certificate
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions.FullSubjectName">
            <summary>
            Full distinguished name that will be used in the certificate
            ie. CN=Subject
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions.RSAKeyName">
            <summary>
            Name of the internal RSA keypair that is created
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions.KeySize">
            <summary>
            Select your RSA key size - Uses Cng which supports 512 to 16384 in 64-bit increments
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions.HashingMethod">
            <summary>
            Select from the supported hashing methods, higher key length is more secure
            </summary>
        </member>
        <member name="T:Kalix.ApiCrypto.RSA.RSACertificateBuilder">
            <summary>
            Helper class to build X509Certificates using the RSA algorithm
            
            Note that it uses the newer Cng library
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSACertificateBuilder.CreateNewCertificate(System.String)">
            <summary>
            Create a ECDSA based certificate with the given subject name. Uses a key size of 4096 by default.
            </summary>
            <param name="subjectName">Subject Name of the certificate (Omit the CN= part)</param>
            <returns>An exportable X509Certificate2 object (with private key)</returns>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSACertificateBuilder.CreateNewCertificate(Kalix.ApiCrypto.RSA.RSACertificateBuilderOptions)">
            <summary>
            Create a RSA based certificate (to be used with encryption) with the given options
            </summary>
            <param name="buildOptions">Allows for more advanced configuration</param>
            <returns>An exportable X509Certificate2 object (with private key)</returns>
        </member>
        <member name="T:Kalix.ApiCrypto.RSA.RSAServiceProvider">
            <summary>
            A wrapper library to match the RSACryptoServiceProvider when using the Cng based private key
            Helps to avoid exposing the internal RSACng class
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.DecryptValue(System.Byte[])">
            <summary>
            DecryptValue decrypts the input data using the padding mode specified in
            the EncryptionPaddingMode property. The return value is the decrypted data.
            </summary>
            <param name="rgb">encrypted data to decrypt</param>
            <exception cref="T:System.ArgumentNullException">if rgb is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if rgb could not be decrypted</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.EncryptValue(System.Byte[])">
            <summary>
            EncryptValue encrypts the input data using the padding mode specified in
            the EncryptionPaddingMode property. The return value is the encrypted data.
            </summary>
            <param name="rgb">data to encrypt</param>
            <exception cref="T:System.ArgumentNullException">if rgb is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if rgb could not be decrypted</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.ExportParameters(System.Boolean)">
            <summary>
            Exports the key used by the RSA object into an RSAParameters object.
            </summary>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            ImportParameters will replace the existing key that RSACng is working with
            by creating a new CngKey for the parameters structure. If the parameters
            structure contains only an exponent and modulus, then only a public key will
            be imported. If the parameters also contain P and Q values, then a full key
            pair will be imported.
            The default KSP used by RSACng does not support importing full RSA key pairs
            on Windows Vista. If the ImportParameters method is called with a full key
            pair, the operation will fail with a CryptographicException stating that
            the operation was invalid. Other KSPs may have similar restrictions. To work
            around this, make sure to only import public keys when using the default
            KSP.
            </summary>
            <exception cref="T:System.ArgumentException">if parameters contains neither an exponent nor a modulus</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            if parameters is not a valid RSA key or if parameters is a full key pair
            and the default KSP is used
            </exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignData(System.Byte[])">
            <summary>
            SignData signs the given data after hashing it with the SignatureHashAlgorithm
            algorithm.
            </summary>
            <param name="data">data to sign</param>
            <exception cref="T:System.ArgumentNullException">if data is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if data could not be signed</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignData(System.IO.Stream)">
            <summary>
            SignData signs the given data after hashing it with the SignatureHashAlgorithm
            algorithm.
            </summary>
            <param name="data">data to sign</param>
            <exception cref="T:System.ArgumentNullException">if data is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if data could not be signed</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            SignData signs the given data after hashing it with the SignatureHashAlgorithm
            algorithm.
            </summary>
            <param name="data">data to sign</param>
            <param name="offset">offset into the data that the signature should begin covering</param>
            <param name="count">number of bytes to include in the signed data</param>
            <exception cref="T:System.ArgumentNullException">if data is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if offset or count are negative, or if count specifies more bytes than are available in data.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if data could not be signed</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignHash(System.Byte[])">
            <summary>
            Sign data which was hashed using the SignatureHashAlgorithm; if the algorithm
            used to hash the data was different, use the SignHash(byte[], CngAlgorithm)
            overload instead.
            </summary>
            <param name="hash">hash to sign</param>
            <exception cref="T:System.ArgumentNullException">if hash is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if data could not be signed</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.CngAlgorithm)">
            <summary>
            Sign already hashed data, specifying the algorithm it was hashed with. This
            method does not use the SignatureHashAlgorithm property.
            </summary>
            <param name="hash">hash to sign</param>
            <param name="hashAlgorithm">algorithm hash was signed with</param>
            <exception cref="T:System.ArgumentNullException">if hash or hashAlgorithm are null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">if data could not be signed</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            VerifyData verifies that the given signature matches given data after hashing
            it with the SignatureHashAlgorithm algorithm.
            </summary>
            <param name="data">data to verify</param>
            <param name="signature">signature of the data</param>
            <returns>true if the signature verifies for the data, false if it does not</returns>
            <exception cref="T:System.ArgumentNullException">if data or signature are null</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.VerifyData(System.IO.Stream,System.Byte[])">
            <summary>
            VerifyData verifies that the given signature matches given data after hashing
            it with the SignatureHashAlgorithm algorithm.
            </summary>
            <param name="data">data to verify</param>
            <param name="signature">signature of the data</param>
            <returns>true if the signature verifies for the data, false if it does not</returns>
            <exception cref="T:System.ArgumentNullException">if data or signature are null</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            VerifyData verifies that the given signature matches given data after hashing
            it with the SignatureHashAlgorithm algorithm.
            </summary>
            <param name="data">data to verify</param>
            <param name="offset">offset into the data that the signature should begin covering</param>
            <param name="count">number of bytes to include in the signed data</param>
            <param name="signature">signature of the data</param>
            <returns>true if the signature verifies for the data, false if it does not</returns>
            <exception cref="T:System.ArgumentNullException">if data or signature are null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if offset or count are negative, or if count specifies more bytes than are available in data.</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verify data which was signed and already hashed with the SignatureHashAlgorithm;
            if a different hash algorithm was used to hash the data use the VerifyHash(byte[],
            byte[], CngAlgorithm) overload instead.
            </summary>
            <param name="hash">hash to verify</param>
            <param name="signature">signature of the data</param>
            <returns>true if the signature verifies for the hash, false if it does not</returns>
            <exception cref="T:System.ArgumentNullException">if hash or signature are null</exception>
            <exception cref="T:System.InvalidOperationException">if SignatureHashAlgorithm is not MD5, SHA-1, SHA-256, SHA-384, or SHA-512</exception>
        </member>
        <member name="M:Kalix.ApiCrypto.RSA.RSAServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.CngAlgorithm)">
            <summary>
            Verify data which was signed and hashed with the given hash algorithm. This
            overload does not use the SignatureHashAlgorithm property.
            </summary>
            <param name="hash">hash to verify</param>
            <param name="signature">signature of the data</param>
            <param name="hashAlgorithm">algorithm that hash was hashed with</param>
            <returns>true if the signature verifies for the hash, false if it does not</returns>
            <exception cref="T:System.ArgumentNullException">if hash, signature, or hashAlgorithm are null</exception>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.EncryptionHashAlgorithm">
            <summary>
            Sets the hash algorithm to use when encrypting or decrypting data using the
            OAEP padding method. This property is only used if data is encrypted or decrypted
            and the EncryptionPaddingMode is set to AsymmetricEncryptionPaddingMode.Oaep.
            The default value is Sha256.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if EncryptionHashAlgorithm is set to null
            </exception>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.EncryptionPaddingMode">
            <summary>
            Sets the padding mode to use when encrypting or decrypting data. The default
            value is AsymmetricPaddingMode.Oaep.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if EncryptionPaddingMOde is set to null
            </exception>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.Key">
            <summary>
            Gets the key that will be used by the RSA object for any cryptographic operation
            that it uses.  This key object will be disposed if the key is reset, for
            instance by changing the KeySize property, using ImportParamers to create
            a new key, or by Disposing of the parent RSA object.  Therefore, you should
            make sure that the key object is no longer used in these scenarios. This
            object will not be the same object as the CngKey passed to the RSACng constructor
            if that constructor was used, however it will point at the same CNG key.
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.KeyExchangeAlgorithm">
            <summary>
            Returns "RSA-PKCS1-KeyEx". This property should not be used.
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.Provider">
            <summary>
            Key storage provider being used for the algorithm
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignatureAlgorithm">
            <summary>
            Returns "http://www.w3.org/2000/09/xmldsig#rsa-sha1". This property should
            not be used.
            </summary>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignatureHashAlgorithm">
            <summary>
            Gets or sets the hash algorithm to use when signing or verifying data. The
            default value is Sha256.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if SignatureHashAlgorithm is set to null
            </exception>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignaturePaddingMode">
            <summary>
            Gets or sets the padding mode to use when encrypting or decrypting data.
            The default value is AsymmetricPaddingMode.Pkcs1.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if SignaturePaddingMode is set to a mode other than Pkcs1 or Pss
            </exception>
        </member>
        <member name="P:Kalix.ApiCrypto.RSA.RSAServiceProvider.SignatureSaltBytes">
            <summary>
            Gets or sets the number of bytes of salt to use when signing data or verifying
            a signature using the PSS padding mode. This property is only used if data
            is being signed or verified and the SignaturePaddingMode is set to AsymmetricEncryptionPaddingMode.Pss.
            The default value is 20 bytes.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if SignatureSaltBytes is set to a negative number
            </exception>
        </member>
    </members>
</doc>
